@{
    var result = ViewBag.result as string;
    string Successcontainer = null;
    string nullcontainer = null;
}


<!DOCTYPE html>
<html>
<head>
    <meta name="viewport" content="width=device-width" />
    <title>Upload Audio File</title>
    <link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Roboto&display=swap">
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
    <style>
        .NullContainer {
            margin-top: 80px;
            margin-left: 25%;
            width: 700px;
            align-items: center;
            height: 100vh;
        }

        #responseContainer {
            margin-top: -100px;
            margin-left: 25%;
            width: 700px;
        }

        #ConvertedString {
            width: 700px;
        }

        .upload-form {
            background-color: #f8f9fa;
            padding: 20px;
            border-radius: 10px;
            box-shadow: 0px 0px 10px 0px rgba(0, 0, 0, 0.1);
        }

        .form-group {
            margin-bottom: 20px;
        }

        .file-input {
            margin-top: 10px;
        }

        .base64-box {
            width: 100%;
            padding: 5px;
            overflow-wrap: break-word; /* Wrap long strings */
        }

        body {
            font-family: "Open Sans", sans-serif; /* Applying Roboto font */
            font-size: 15px;
        }

        .NullContainer{
            display: none;
        }

        .Successcontainer{
            display: none;
        }
    </style>
</head>
<body>
    @if (result == null)
    {
        Successcontainer = "Successcontainer";
        
    }
    else if (result == "Success")
    {
        nullcontainer = "NullContainer";
    }

     
        <div class= "@nullcontainer">
            <div class="upload-form col-md-6">
                <h4 class="text-center">Voice Liveness</h4>
                <hr />
                <form id="uploadForm" action="audioRecording" method="post" enctype="multipart/form-data">
                    <div asp-validation-summary="ModelOnly" class="text-danger"></div>
                    <div class="form-group">
                        <label for="EmployeeID">Employee ID:</label>
                        <input id="EmployeeID" name="EmployeeID" class="form-control" />
                        <span class="text-danger"></span>
                    </div>
                    <div class="form-group">
                        <label for="Email">Email:</label>
                        <input id="Email" name="Email" class="form-control" />
                        <span class="text-danger"></span>
                    </div>
                    <div class="form-group">
                        <input type="button" value="Start Recording" class="btn btn-primary btn-block" onclick="startRecording()" />
                    </div>
                    <div class="form-group" style="display:none;">
                        <input id="audioFile" name="File" type="file" accept="audio/*" capture="microphone">
                    </div>
                    <div id="myModal" class="modal">
                        <div id="modalContent"></div>
                    </div>
                </form>
            </div>
        </div>

  
        <div class= "@Successcontainer">
            <div class="img">
                <img src="/css/Images/checklist_10629607.png" />
            </div>
            <div class="info">
                <h3>Voice Liveness Verification Successfull</h3>
                <a class="nav-link button-green1" asp-area="" asp-controller="Audio" asp-action="Index">Continue</a><br />
                <a class="nav-link button-green" asp-area="" asp-controller="Audio" asp-action="audioRecording">Retry</a>
            </div>
        </div>
    
    


    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script>
        function startRecording() {
            var countdown = 5; // 5 seconds recording
            var audioChunks = [];
            var mediaRecorder = null;
            var options = { mimeType: 'audio/webm' };

            navigator.mediaDevices.getUserMedia({ audio: true })
                .then(function (stream) {
                    mediaRecorder = new MediaRecorder(stream, options);
                    mediaRecorder.start();

                    setTimeout(function () {
                        mediaRecorder.stop();
                        stream.getTracks().forEach(track => track.stop());
                        submitForm();
                    }, countdown * 1000);

                    mediaRecorder.addEventListener("dataavailable", function (event) {
                        audioChunks.push(event.data);
                    });

                    mediaRecorder.addEventListener("stop", function () {
                        var blob = new Blob(audioChunks, { type: 'audio/webm' });
                        var formData = new FormData();
                        formData.append('File', blob);
                        formData.append('EmployeeID', document.getElementById('EmployeeID').value);
                        formData.append('Email', document.getElementById('Email').value);

                        $.ajax({
                            type: "POST",
                            url: $('#uploadForm').attr('action'),
                            data: formData,
                            processData: false,
                            contentType: false,
                            success: function (data) {
                                $('#modalContent').html(data);
                                $('#myModal').modal('show');
                            },
                            error: function () {
                                console.log('Error processing audio');
                            }
                        });
                    });
                })
                .catch(function (error) {
                    console.log('Error starting recording:', error);
                });
        }
    </script>
</body>
</html>
